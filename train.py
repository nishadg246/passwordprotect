from pybrain.structure import FeedForwardNetwork
from pybrain.structure import LinearLayer, SigmoidLayer, TanhLayer, GaussianLayer
from pybrain.structure import FullConnection
from pybrain.datasets import SupervisedDataSet
from pybrain.supervised.trainers import BackpropTrainer

n = FeedForwardNetwork()
inLayer = LinearLayer(14)
hiddenLayer = SigmoidLayer(300)
hiddenLayer2 = SigmoidLayer(200)
hiddenLayer3 = SigmoidLayer(100)
hiddenLayer4 = TanhLayer(50)
outLayer = LinearLayer(1)
n.addInputModule(inLayer)
n.addModule(hiddenLayer)
n.addModule(hiddenLayer2)
n.addModule(hiddenLayer3)
n.addModule(hiddenLayer4)
n.addOutputModule(outLayer)
in_to_hidden = FullConnection(inLayer, hiddenLayer)
hidden_to_hidden = FullConnection(hiddenLayer, hiddenLayer2)
hidden_to_hidden2 = FullConnection(hiddenLayer2, hiddenLayer3)
hidden_to_hidden3 = FullConnection(hiddenLayer3, hiddenLayer4)
hidden_to_out = FullConnection(hiddenLayer4, outLayer)
n.addConnection(in_to_hidden)
n.addConnection(hidden_to_hidden)
n.addConnection(hidden_to_hidden2)
n.addConnection(hidden_to_hidden3)
n.addConnection(hidden_to_out)
n.sortModules()
ds = SupervisedDataSet(14, 1)
ds.addSample([0, 175, 271, 343, 479, 559, 719, 935, 1102, 1222, 1294, 1422, 1607, 1895], (1,))
ds.addSample([0, 159, 263, 335, 447, 543, 711, 919, 1063, 1191, 1263, 1375, 1551, 1808], (1,))
ds.addSample([0, 209, 265, 384, 488, 584, 744, 960, 1104, 1224, 1320, 1488, 1752, 2032], (1,))
ds.addSample([0, 152, 216, 328, 424, 520, 680, 904, 1048, 1160, 1248, 1368, 1552, 1824], (1,))
ds.addSample([0, 199, 511, 607, 727, 823, 991, 1216, 1367, 1495, 1591, 1711, 1903, 2223], (1,))
ds.addSample([0, 232, 327, 416, 544, 616, 784, 1000, 1152, 1263, 1359, 1479, 1648, 1904], (1,))
ds.addSample([0, 160, 263, 335, 479, 567, 743, 975, 1119, 1231, 1335, 1471, 1711, 1983], (1,))
ds.addSample([0, 247, 607, 703, 847, 943, 1119, 1351, 1536, 1639, 1743, 1919, 2167, 2464], (1,))
ds.addSample([0, 136, 232, 312, 448, 520, 688, 936, 1112, 1232, 1336, 1520, 1752, 2032], (1,))
ds.addSample([0, 103, 183, 271, 391, 471, 647, 847, 1007, 1127, 1215, 1335, 1454, 1703], (1,))
ds.addSample([0, 160, 240, 336, 440, 536, 712, 943, 1120, 1224, 1327, 1472, 1656, 1911], (1,))
ds.addSample([0, 151, 232, 328, 447, 528, 712, 943, 1119, 1239, 1344, 1480, 1631, 1888], (1,))
ds.addSample([0, 191, 279, 368, 503, 583, 767, 991, 1151, 1263, 1367, 1535, 1743, 2039], (1,))
ds.addSample([0, 136, 240, 312, 448, 520, 696, 944, 1112, 1232, 1328, 1600, 1792, 2065], (1,))
ds.addSample([0, 136, 223, 304, 448, 528, 704, 928, 1080, 1200, 1288, 1432, 1616, 1912], (1,))
ds.addSample([0, 192, 312, 384, 544, 648, 816, 1040, 1224, 1336, 1440, 1584, 1784, 2112], (1,))
ds.addSample([0, 144, 239, 336, 472, 568, 744, 975, 1151, 1248, 1368, 1568, 1736, 2480], (1,))
ds.addSample([0, 136, 231, 327, 455, 560, 728, 959, 1127, 1240, 1343, 1552, 1768, 2240], (1,))
ds.addSample([0, 199, 311, 391, 544, 631, 815, 1095, 1336, 1487, 1583, 1751, 1975, 2303], (1,))

ds.addSample([0, 263, 447, 807, 1503, 1591, 1887, 2167, 2358, 2495, 2679, 3783, 4208, 4711], (0,))
ds.addSample([0, 200, 336, 640, 1320, 1456, 1679, 2479, 2647, 2791, 2887, 3560, 3775, 4191], (0,))
ds.addSample([0, 184, 352, 496, 712, 840, 1040, 1304, 1480, 1608, 1744, 2000, 2240, 2776], (0,))
ds.addSample([0, 120, 256, 368, 648, 832, 1032, 1480, 1696, 1896, 2064, 2360, 2864, 3240], (0,))
ds.addSample([0, 192, 904, 1048, 1367, 1479, 1663, 2183, 2360, 2471, 2591, 3127, 3352, 3768], (0,))
ds.addSample([0, 112, 272, 424, 616, 720, 912, 1160, 1352, 1464, 1576, 1792, 2152, 2408], (0,))
ds.addSample([0, 127, 431, 583, 823, 943, 1223, 1791, 2031, 2599, 2767, 3063, 3447, 3807], (0,))
ds.addSample([0, 152, 376, 503, 752, 880, 1104, 1520, 1720, 1856, 2023, 2728, 3088, 3488], (0,))
ds.addSample([0, 207, 423, 567, 791, 895, 1120, 1439, 1655, 1791, 1919, 2150, 2447, 2807], (0,))
ds.addSample([0, 136, 328, 464, 688, 808, 1080, 1440, 2080, 2360, 2496, 2872, 3208, 3688], (0,))
ds.addSample([0, 150, 358, 518, 1446, 1550, 1774, 2166, 2382, 2526, 2686, 2894, 3174, 3590], (0,))
ds.addSample([0, 191, 359, 520, 768, 896, 1168, 1519, 1695, 1904, 2056, 2287, 2832, 3207], (0,))
ds.addSample([0, 393, 648, 792, 1081, 1216, 1569, 2089, 2288, 2456, 2576, 2842, 3080, 3280], (0,))
ds.addSample([0, 136, 328, 464, 688, 808, 1032, 1360, 1592, 1760, 1952, 2784, 3200, 3616], (0,))
ds.addSample([0, 136, 296, 440, 720, 840, 1048, 1408, 1616, 2216, 3000, 3216, 3528, 3896], (0,))
ds.addSample([0, 160, 352, 480, 736, 872, 1096, 1384, 1575, 1744, 1920, 2176, 2408, 2664], (0,))
ds.addSample([0, 127, 319, 519, 743, 871, 1112, 1783, 1999, 2175, 2295, 2544, 2783, 3071], (0,))
ds.addSample([0, 128, 328, 456, 688, 816, 1040, 1848, 2032, 2152, 2264, 2504, 2744, 3096], (0,))
ds.addSample([0, 168, 336, 824, 1136, 1280, 1608, 2096, 2304, 2512, 2656, 3232, 3464, 3760], (0,))
trainer = BackpropTrainer(n, dataset=ds, momentum=0.4, verbose=True, weightdecay=0.02)
trainer.trainEpochs(30)